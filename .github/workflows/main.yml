name: draco-ci-build
on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master

jobs:

  lint-code:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install apt dependencies
      run: |
        sudo apt-get install -y libopenmpi-dev openmpi-bin

    - name: Install pip dependencies
      run: |
        pip install black flake8 pylint pylint-ignore
        pip install -r requirements.txt
        python setup.py develop

    - name: Run flake8
      # ignore: line too long, variable names, whitespace before ':', line break before binary operator, comment style
      run: flake8 --show-source --ignore=E501,E741,E203,W503,E266 draco

    - name: Run pylint
      run: >
        pylint-ignore -d
        line-too-long,invalid-name,import-outside-toplevel,logging-fstring-interpolation,unnecessary-pass,no-else-return
        --extension-pkg-whitelist=mpi4py,caput.weighted_median,scipy,draco.util._fast_tools,draco.util.truncate,bitshuffle.h5
        draco

    - name: Check code with black
      run: black --check .

  run-tests:

    strategy:
      matrix:
        python-version: [3.6, 3.8]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install apt dependencies
      run: |
        sudo apt-get install -y libopenmpi-dev openmpi-bin

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pip dependencies
      run: |
        pip install wheel
        pip install numpy
        pip install cython
        pip install --use-deprecated=legacy-resolver -r requirements.txt
        pip install mpi4py
        pip install pytest
        python setup.py develop

    - name: Run serial tests
      run: pytest -x test/

    - name: Run parallel tests
      run: |
        mpirun -np 4 --oversubscribe pytest -x -m mpi test/

    - name: Run caput linter on example configs
      run: |
        caput-pipeline lint examples/*.yaml
        caput-pipeline lint doc/pipeline_params.yaml

  build-docs:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install apt dependencies
      run: |
        sudo apt-get install -y libopenmpi-dev openmpi-bin

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install pip dependencies
      run: |
        pip install wheel
        pip install numpy
        pip install cython
        pip install --use-deprecated=legacy-resolver -r requirements.txt
        pip install -r doc/requirements.txt
        python setup.py develop

    - name: Build sphinx docs
      run: sphinx-build -W -b html doc/ doc/_build/html
